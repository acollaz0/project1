package com.revature.eval.java.core;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.junit.runners.Suite;
import org.junit.runners.Suite.SuiteClasses;


public class AllTests {
	private static final WorkArea evaluationService = new WorkArea();
	
	@Rule
	public ExpectedException expectedException = ExpectedException.none();
	
	/*******************************************************************
	 * Question 13
	 ******************************************************************/

	@Test
	public void testEncodeYes() {
		assertEquals("bvh", WorkArea.AtbashCipher.encode("yes"));
	}

	@Test
	public void testEncodeOmgInCapital() {
		assertEquals("lnt", WorkArea.AtbashCipher.encode("OMG"));
	}

	@Test
	public void testEncodeMindBlowingly() {
		assertEquals("nrmwy oldrm tob", WorkArea.AtbashCipher.encode("mindblowingly"));
	}

	@Test
	public void testEncodeNumbers() {
		assertEquals("gvhgr mt123 gvhgr mt", WorkArea.AtbashCipher.encode("Testing,1 2 3, testing."));
	}

	@Test
	public void testEncodeDeepThought() {
		assertEquals("gifgs rhurx grlm", WorkArea.AtbashCipher.encode("Truth is fiction."));
	}

	@Test
	public void testEncodeAllTheLetters() {
		assertEquals("gsvjf rxpyi ldmul cqfnk hlevi gsvoz abwlt",
				WorkArea.AtbashCipher.encode("The quick brown fox jumps over the lazy dog."));
	}

	/*******************************************************************
	 * Question 14
	 ******************************************************************/
	@Test
	public void testDecodeExercism() {
		assertEquals("exercism", WorkArea.AtbashCipher.decode("vcvix rhn"));
	}

	@Test
	public void testDecodeASentence() {
		assertEquals("anobstacleisoftenasteppingstone",
				WorkArea.AtbashCipher.decode("zmlyh gzxov rhlug vmzhg vkkrm thglm v"));
	}

	@Test
	public void testDecodeNumbers() {
		assertEquals("testing123testing", WorkArea.AtbashCipher.decode("gvhgr mt123 gvhgr mt"));
	}

	@Test
	public void testDecodeAllTheLetters() {
		assertEquals("thequickbrownfoxjumpsoverthelazydog",
				WorkArea.AtbashCipher.decode("gsvjf rxpyi ldmul cqfnk hlevi gsvoz abwlt"));
	}
	
}
