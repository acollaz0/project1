package com.revature.eval.java.core;

import java.util.Dictionary;
import java.util.HashMap;
import java.util.Map;

public class WorkArea {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(acronym("GNU Image Manipulation Program"));
		
		System.out.println(acronym("First In, First Out"));
		
		System.out.println(acronym("Portable Network Graphics"));
		
		System.out.println(acronym("Complementary metal-oxide semiconductor"));
		
		System.out.println(acronym(""));
		
		Triangle t = new Triangle(0.5,0.5,0.5);
		System.out.println("IsEqui: " + t.isEquilateral());
		System.out.println("IsIso: " + t.isIsosceles());
		System.out.println("IsSca: " + t.isScalene());
		
	}
	
	/**
	 * 1. Without using the StringBuilder or StringBuffer class, write a method that
	 * reverses a String. Example: reverse("example"); -> "elpmaxe"
	 * 
	 * @param string
	 * @return
	 */
	public String reverse(String string) {
		char[] reversed = new char[string.length()];
		for (int i = reversed.length - 1, j=0; i >= 0; i--, j++) {
			reversed[j] = string.charAt(i);
		}
		return new String(reversed);
	}

	/**
	 * 2. Convert a phrase to its acronym. Techies love their TLA (Three Letter
	 * Acronyms)! Help generate some jargon by writing a program that converts a
	 * long name like Portable Network Graphics to its acronym (PNG).
	 * 
	 * @param phrase
	 * @return
	 */
	public static String acronym(String phrase) {
		// TODO Write an implementation for this method declaration
		phrase = phrase.trim();
		if (phrase.length()<1) {
			return "";
		}
		
		String acronym = phrase.substring(0, 1);
		for (int i = 1; i < phrase.length(); i++) {
			if (phrase.substring((i-1), i).matches("[^A-Za-z]") && phrase.substring(i, i+1).matches("[A-Za-z]")) {
				acronym = acronym + phrase.substring(i, i+1);
			}
		}
		return acronym.toUpperCase();
	}

	/**
	 * 3. Determine if a triangle is equilateral, isosceles, or scalene. An
	 * equilateral triangle has all three sides the same length. An isosceles
	 * triangle has at least two sides the same length. (It is sometimes specified
	 * as having exactly two sides the same length, but for the purposes of this
	 * exercise we'll say at least two.) A scalene triangle has all sides of
	 * different lengths.
	 *
	 */
	static class Triangle {
		private double sideOne;
		private double sideTwo;
		private double sideThree;

		public Triangle() {
			super();
		}

		public Triangle(double sideOne, double sideTwo, double sideThree) {
			this();
			this.sideOne = sideOne;
			this.sideTwo = sideTwo;
			this.sideThree = sideThree;
		}

		public double getSideOne() {
			return sideOne;
		}

		public void setSideOne(double sideOne) {
			this.sideOne = sideOne;
		}

		public double getSideTwo() {
			return sideTwo;
		}

		public void setSideTwo(double sideTwo) {
			this.sideTwo = sideTwo;
		}

		public double getSideThree() {
			return sideThree;
		}

		public void setSideThree(double sideThree) {
			this.sideThree = sideThree;
		}

		public boolean isEquilateral() {
			// TODO Write an implementation for this method declaration
			if (this.sideOne == this.sideTwo && this.sideTwo == this.sideThree) {
				return true;
			} else {
				return false;
			}
		}

		public boolean isIsosceles() {
			// TODO Write an implementation for this method declaration
			
			if (this.isEquilateral()) {
				return true;
			}
			
			//Catch if the triangle is impossible
			if ((this.sideOne+this.sideTwo<this.sideThree) || (this.sideTwo + this.sideThree<this.sideOne) || (this.sideThree + this.sideOne<this.sideTwo)) {
				return false;
			}
			if (this.sideOne==this.sideTwo || this.sideTwo==this.sideThree || this.sideOne==this.sideThree) {
				return true;
			} else {
				return false;
			}
			
		}

		public boolean isScalene() {
			if (this.isEquilateral() || this.isIsosceles()) { 
				return false;
			}
			if ((this.sideOne+this.sideTwo<this.sideThree) || (this.sideTwo + this.sideThree<this.sideOne) || (this.sideThree + this.sideOne<this.sideTwo)) {
				return false;
			} else {return true;}
		}

	}

	/**
	 * 4. Given a word, compute the scrabble score for that word.
	 * 
	 * --Letter Values-- Letter Value A, E, I, O, U, L, N, R, S, T = 1; D, G = 2; B,
	 * C, M, P = 3; F, H, V, W, Y = 4; K = 5; J, X = 8; Q, Z = 10; Examples
	 * "cabbage" should be scored as worth 14 points:
	 * 
	 * 3 points for C, 1 point for A, twice 3 points for B, twice 2 points for G, 1
	 * point for E And to total:
	 * 
	 * 3 + 2*1 + 2*3 + 2 + 1 = 3 + 2 + 6 + 3 = 5 + 9 = 14
	 * 
	 * @param string
	 * @return
	 */
	public int getScrabbleScore(String string) {
		// TODO Write an implementation for this method declaration
		Map<Character,Integer> scores = new HashMap<Character,Integer>() {{
			
			put('A',1);
			put('E',1);
			put('I',1);
			put('O',1);
			put('U',1);
			put('L',1);
			put('N',1);
			put('R',1);
			put('S',1);
			put('T',1);
			put('D',2);
			put('G',2);
			put('B',3);
			put('C',3);
			put('M',3);
			put('P',3);
			put('F',4);
			put('H',4);
			put('V',4);
			put('W',4);
			put('Y',4);
			put('K',5);
			put('J',8);
			put('X',8);
			put('Q',10);
			put('Z',10);
			
		}}
		
		int sum = 0
		for (int i = 0; i < string.length(); i++) {
			sum+=scores.get(string.charAt(i));
		}
		
		return ;
	}

}
