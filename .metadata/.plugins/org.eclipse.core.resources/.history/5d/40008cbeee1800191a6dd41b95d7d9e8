package com.revature.eval.java.core;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.junit.runners.Suite;
import org.junit.runners.Suite.SuiteClasses;


public class AllTests {
	private static final WorkArea evaluationService = new WorkArea();
	
	@Rule
	public ExpectedException expectedException = ExpectedException.none();
	
	/*******************************************************************
	 * Question 5
	 ******************************************************************/
	@Test
	public void cleansTheNumber() {
		final String expectedNumber = "2234567890";
		final String actualNumber = evaluationService.cleanPhoneNumber("(223) 456-7890");
		assertEquals(expectedNumber, actualNumber);
	}

	@Test
	public void cleansNumbersWithDots() {
		final String expectedNumber = "2234567890";
		final String actualNumber = evaluationService.cleanPhoneNumber("223.456.7890");
		assertEquals(expectedNumber, actualNumber);
	}

	@Test
	public void cleansNumbersWithMultipleSpaces() {
		final String expectedNumber = "2234567890";
		final String actualNumber = evaluationService.cleanPhoneNumber("223 456   7890   ");
		assertEquals(expectedNumber, actualNumber);
	}

	@Test
	public void invalidWhenMoreThan11Digits() {
		expectedException.expect(IllegalArgumentException.class);
		evaluationService.cleanPhoneNumber("321234567890");
	}

	@Test
	public void invalidWithNonNumeric() {
		expectedException.expect(IllegalArgumentException.class);
		evaluationService.cleanPhoneNumber("123-abc-7890");
		expectedException.expect(IllegalArgumentException.class);
		evaluationService.cleanPhoneNumber("123-@:!-7890");
	}
	
	//QUestion 4:
	
	@Test
	public void testAValuableLetter() {
		assertEquals(4, evaluationService.getScrabbleScore("f"));
	}

	@Test
	public void testAShortValuableWord() {
		assertEquals(12, evaluationService.getScrabbleScore("zoo"));
	}

	@Test
	public void testAMediumWord() {
		assertEquals(6, evaluationService.getScrabbleScore("street"));
	}

	@Test
	public void testAMediumValuableWord() {
		assertEquals(22, evaluationService.getScrabbleScore("quirky"));
	}

	@Test
	public void testALongMixCaseWord() {
		assertEquals(41, evaluationService.getScrabbleScore("OxyphenButazone"));
	}
	
	/*
	 * @Test public void trianglesWithNoEqualSidesAreNotEquilateral() {
	 * WorkArea.Triangle triangle = new WorkArea.Triangle(5, 4, 6);
	 * assertFalse(triangle.isEquilateral()); }
	 * 
	 * @Test public void verySmallTrianglesCanBeEquilateral() { WorkArea.Triangle
	 * triangle = new WorkArea.Triangle(0.5, 0.5, 0.5);
	 * assertTrue(triangle.isEquilateral()); }
	 * 
	 * @Test public void isoscelesTrianglesMustHaveAtLeastTwoEqualSides() {
	 * WorkArea.Triangle triangle = new WorkArea.Triangle(2, 3, 4);
	 * assertFalse(triangle.isIsosceles()); }
	 * 
	 * @Test public void verySmallTrianglesCanBeIsosceles() { WorkArea.Triangle
	 * triangle = new WorkArea.Triangle(0.5, 0.4, 0.5);
	 * assertTrue(triangle.isIsosceles()); }
	 * 
	 * @Test public void trianglesWithAllSidesEqualAreNotScalene() {
	 * WorkArea.Triangle triangle = new WorkArea.Triangle(4, 4, 4);
	 * assertFalse(triangle.isScalene()); }
	 * 
	 * @Test public void verySmallTrianglesCanBeScalene() { WorkArea.Triangle
	 * triangle = new WorkArea.Triangle(0.5, 0.4, 0.6);
	 * assertTrue(triangle.isScalene()); }
	 */
}
