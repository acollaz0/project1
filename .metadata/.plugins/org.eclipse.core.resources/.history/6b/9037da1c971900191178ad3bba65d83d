package com.revature.eval.java.core;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkArea {

	public static void main(String[] args) {
		
		System.out.println(isArmstrongNumber(10));
		
	}
	
	//done
	/**
	 * 5. Clean up user-entered phone numbers so that they can be sent SMS messages.
	 * 
	 * The North American Numbering Plan (NANP) is a telephone numbering system used
	 * by many countries in North America like the United States, Canada or Bermuda.
	 * All NANP-countries share the same international country code: 1.
	 * 
	 * NANP numbers are ten-digit numbers consisting of a three-digit Numbering Plan
	 * Area code, commonly known as area code, followed by a seven-digit local
	 * number. The first three digits of the local number represent the exchange
	 * code, followed by the unique four-digit number which is the subscriber
	 * number.
	 * 
	 * The format is usually represented as
	 * 
	 * 1 (NXX)-NXX-XXXX where N is any digit from 2 through 9 and X is any digit
	 * from 0 through 9.
	 * 
	 * Your task is to clean up differently formatted telephone numbers by removing
	 * punctuation and the country code (1) if present.
	 * 
	 * For example, the inputs
	 * 
	 * +1 (613)-995-0253 613-995-0253 1 613 995 0253 613.995.0253 should all produce
	 * the output
	 * 
	 * 6139950253
	 * 
	 * Note: As this exercise only deals with telephone numbers used in
	 * NANP-countries, only 1 is considered a valid country code.
	 */
	public String cleanPhoneNumber(String string) {
		// TODO Write an implementation for this method declaration
		String out = "";
		for (int i = 0; i < string.length(); i++) {
			Character c = string.charAt(i);
			if (Character.isDigit(c)) {
				out += c;
			}
		}
		
		if (out.length() > 11 || out.length()<10) {
			throw new IllegalArgumentException();
		}
		
		if (out.length()==11) {
			out = out.substring(1);
		}
		
		return out;
	}

	//done
	/**
	 * 6. Given a phrase, count the occurrences of each word in that phrase.
	 * 
	 * For example for the input "olly olly in come free" olly: 2 in: 1 come: 1
	 * free: 1
	 * 
	 * @param string
	 * @return
	 */
	public Map<String, Integer> wordCount(String string) {
		// TODO Write an implementation for this method declaration
		Map<String, Integer> counts = new HashMap<String,Integer>();
		string = string.toLowerCase().trim();
		String[] words = string.split("[^a-z]");
		
		for (int i = 0; i < words.length; i++) {
			
			if (words[i].isEmpty()) {continue;}
			
			if (counts.containsKey(words[i])) {
				counts.replace(words[i], counts.get(words[i]) + 1);
			} else {
				counts.put(words[i], 1);
			}
		}
		
		return counts;
	}

	/**
	 * 7. Implement a binary search algorithm.
	 * 
	 * Searching a sorted collection is a common task. A dictionary is a sorted list
	 * of word definitions. Given a word, one can find its definition. A telephone
	 * book is a sorted list of people's names, addresses, and telephone numbers.
	 * Knowing someone's name allows one to quickly find their telephone number and
	 * address.
	 * 
	 * If the list to be searched contains more than a few items (a dozen, say) a
	 * binary search will require far fewer comparisons than a linear search, but it
	 * imposes the requirement that the list be sorted.
	 * 
	 * In computer science, a binary search or half-interval search algorithm finds
	 * the position of a specified input value (the search "key") within an array
	 * sorted by key value.
	 * 
	 * In each step, the algorithm compares the search key value with the key value
	 * of the middle element of the array.
	 * 
	 * If the keys match, then a matching element has been found and its index, or
	 * position, is returned.
	 * 
	 * Otherwise, if the search key is less than the middle element's key, then the
	 * algorithm repeats its action on the sub-array to the left of the middle
	 * element or, if the search key is greater, on the sub-array to the right.
	 * 
	 * If the remaining array to be searched is empty, then the key cannot be found
	 * in the array and a special "not found" indication is returned.
	 * 
	 * A binary search halves the number of items to check with each iteration, so
	 * locating an item (or determining its absence) takes logarithmic time. A
	 * binary search is a dichotomic divide and conquer search algorithm.
	 * 
	 */
	static class BinarySearch<T> implements Comparable<T> {
		private List<T> sortedList;

		public int indexOf(T t) {
			// TODO Write an implementation for this method declaration
			
			return 0;
		}

		public BinarySearch(List<T> sortedList) {
			super();
			this.sortedList = sortedList;
		}

		public List<T> getSortedList() {
			return sortedList;
		}

		public void setSortedList(List<T> sortedList) {
			this.sortedList = sortedList;
		}

		@Override
		public int compareTo(T arg0) {
			// TODO Auto-generated method stub
			
			return 0;
		}

	}

	//done
	/**
	 * 8. Implement a program that translates from English to Pig Latin.
	 * 
	 * Pig Latin is a made-up children's language that's intended to be confusing.
	 * It obeys a few simple rules (below), but when it's spoken quickly it's really
	 * difficult for non-children (and non-native speakers) to understand.
	 * 
	 * Rule 1: If a word begins with a vowel sound, add an "ay" sound to the end of
	 * the word. Rule 2: If a word begins with a consonant sound, move it to the end
	 * of the word, and then add an "ay" sound to the end of the word. There are a
	 * few more rules for edge cases, and there are regional variants too.
	 * 
	 * See http://en.wikipedia.org/wiki/Pig_latin for more details.
	 * 
	 * @param string
	 * @return
	 */
	public static String toPigLatin(String string) {
		
		string = string.trim();
		String out = "";
		if (string.indexOf(" ") == -1) {
			out = singleWordToPigLatin(string);
		} else {
			String[] words = string.split(" ");
			for (int i = 0; i < words.length; i++) {
				out += singleWordToPigLatin(words[i]) + " ";
			}
		}
		return out.trim();
		
	}
	
	/**
	 * @param string a single word, alphabet only characters
	 * @return string in pig latin
	 */
	public static String singleWordToPigLatin(String string) {
		String out = "";
		string = string.toLowerCase();

		if (string.matches("^[aeiou].*$")) {
			out = string;
		} else {
			
			while (string.substring(0, 1).matches("[^aeiou]")) {
				string = string.substring(1) + string.substring(0,1);
			}
			
			if (string.matches("^u.*q$")) {
				string = string.substring(1) + string.substring(0,1);
			}
			
			out = string;
		}
		
		return out + "ay";
	}

	//done
	/**
	 * 9. An Armstrong number is a number that is the sum of its own digits each
	 * raised to the power of the number of digits.
	 * 
	 * For example:
	 * 
	 * 9 is an Armstrong number, because 9 = 9^1 = 9 10 is not an Armstrong number,
	 * because 10 != 1^2 + 0^2 = 2 153 is an Armstrong number, because: 153 = 1^3 +
	 * 5^3 + 3^3 = 1 + 125 + 27 = 153 154 is not an Armstrong number, because: 154
	 * != 1^3 + 5^3 + 4^3 = 1 + 125 + 64 = 190 Write some code to determine whether
	 * a number is an Armstrong number.
	 * 
	 * @param input
	 * @return
	 */
	public static boolean isArmstrongNumber(int input) {
		
		int out = 0;
		
		char[] num = Integer.toString(input).toCharArray();
		int exponent = num.length;
		
		for (int i = 0; i < num.length; i++) {
			out += Math.pow(Character.getNumericValue(num[i]), exponent);
		}
		
		return out == input;
	}
	
	/**
	 * 1. Without using the StringBuilder or StringBuffer class, write a method that
	 * reverses a String. Example: reverse("example"); -> "elpmaxe"
	 * 
	 * @param string
	 * @return
	 */
	public String reverse(String string) {
		char[] reversed = new char[string.length()];
		for (int i = reversed.length - 1, j=0; i >= 0; i--, j++) {
			reversed[j] = string.charAt(i);
		}
		return new String(reversed);
	}

	/**
	 * 2. Convert a phrase to its acronym. Techies love their TLA (Three Letter
	 * Acronyms)! Help generate some jargon by writing a program that converts a
	 * long name like Portable Network Graphics to its acronym (PNG).
	 * 
	 * @param phrase
	 * @return
	 */
	public static String acronym(String phrase) {
		// TODO Write an implementation for this method declaration
		phrase = phrase.trim();
		if (phrase.length()<1) {
			return "";
		}
		
		String acronym = phrase.substring(0, 1);
		for (int i = 1; i < phrase.length(); i++) {
			if (phrase.substring((i-1), i).matches("[^A-Za-z]") && phrase.substring(i, i+1).matches("[A-Za-z]")) {
				acronym = acronym + phrase.substring(i, i+1);
			}
		}
		return acronym.toUpperCase();
	}

	/**
	 * 3. Determine if a triangle is equilateral, isosceles, or scalene. An
	 * equilateral triangle has all three sides the same length. An isosceles
	 * triangle has at least two sides the same length. (It is sometimes specified
	 * as having exactly two sides the same length, but for the purposes of this
	 * exercise we'll say at least two.) A scalene triangle has all sides of
	 * different lengths.
	 *
	 */
	static class Triangle {
		private double sideOne;
		private double sideTwo;
		private double sideThree;

		public Triangle() {
			super();
		}

		public Triangle(double sideOne, double sideTwo, double sideThree) {
			this();
			this.sideOne = sideOne;
			this.sideTwo = sideTwo;
			this.sideThree = sideThree;
		}

		public double getSideOne() {
			return sideOne;
		}

		public void setSideOne(double sideOne) {
			this.sideOne = sideOne;
		}

		public double getSideTwo() {
			return sideTwo;
		}

		public void setSideTwo(double sideTwo) {
			this.sideTwo = sideTwo;
		}

		public double getSideThree() {
			return sideThree;
		}

		public void setSideThree(double sideThree) {
			this.sideThree = sideThree;
		}

		public boolean isEquilateral() {
			// TODO Write an implementation for this method declaration
			if (this.sideOne == this.sideTwo && this.sideTwo == this.sideThree) {
				return true;
			} else {
				return false;
			}
		}

		public boolean isIsosceles() {
			// TODO Write an implementation for this method declaration
			
			if (this.isEquilateral()) {
				return true;
			}
			
			//Catch if the triangle is impossible
			if ((this.sideOne+this.sideTwo<this.sideThree) || (this.sideTwo + this.sideThree<this.sideOne) || (this.sideThree + this.sideOne<this.sideTwo)) {
				return false;
			}
			if (this.sideOne==this.sideTwo || this.sideTwo==this.sideThree || this.sideOne==this.sideThree) {
				return true;
			} else {
				return false;
			}
			
		}

		public boolean isScalene() {
			if (this.isEquilateral() || this.isIsosceles()) { 
				return false;
			}
			if ((this.sideOne+this.sideTwo<this.sideThree) || (this.sideTwo + this.sideThree<this.sideOne) || (this.sideThree + this.sideOne<this.sideTwo)) {
				return false;
			} else {return true;}
		}

	}

	/**
	 * 4. Given a word, compute the scrabble score for that word.
	 * 
	 * --Letter Values-- Letter Value A, E, I, O, U, L, N, R, S, T = 1; D, G = 2; B,
	 * C, M, P = 3; F, H, V, W, Y = 4; K = 5; J, X = 8; Q, Z = 10; Examples
	 * "cabbage" should be scored as worth 14 points:
	 * 
	 * 3 points for C, 1 point for A, twice 3 points for B, twice 2 points for G, 1
	 * point for E And to total:
	 * 
	 * 3 + 2*1 + 2*3 + 2 + 1 = 3 + 2 + 6 + 3 = 5 + 9 = 14
	 * 
	 * @param string
	 * @return
	 */
	public static int getScrabbleScore(String string) {
		// TODO Write an implementation for this method declaration
		Map<Character,Integer> scores = new HashMap<Character,Integer>() {{
			
			put('A',1);
			put('E',1);
			put('I',1);
			put('O',1);
			put('U',1);
			put('L',1);
			put('N',1);
			put('R',1);
			put('S',1);
			put('T',1);
			put('D',2);
			put('G',2);
			put('B',3);
			put('C',3);
			put('M',3);
			put('P',3);
			put('F',4);
			put('H',4);
			put('V',4);
			put('W',4);
			put('Y',4);
			put('K',5);
			put('J',8);
			put('X',8);
			put('Q',10);
			put('Z',10);
			
		}};
		string = string.toUpperCase();
		int sum = 0;
		for (int i = 0; i < string.length(); i++) {
			sum+=scores.get(string.charAt(i));
		}
		
		return sum;
	}

}
